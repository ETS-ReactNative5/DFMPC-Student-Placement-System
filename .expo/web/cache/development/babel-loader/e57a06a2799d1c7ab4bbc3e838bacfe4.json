{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport CalendarPicker from 'react-native-calendar-picker';\nimport { useNavigation } from '@react-navigation/core';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar buttonHeight = 50;\nvar textPos = buttonHeight / 2;\nvar SPACING = 20;\nvar AVATAR_SIZE = 70;\nvar ICON_SIZE = 80;\n\nvar Calendar = function (_Component) {\n  _inherits(Calendar, _Component);\n\n  var _super = _createSuper(Calendar);\n\n  function Calendar(props) {\n    var _this;\n\n    _classCallCheck(this, Calendar);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      selectedStartDate: null,\n      selectedEndDate: null\n    };\n    _this.onDateChange = _this.onDateChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Calendar, [{\n    key: \"onDateChange\",\n    value: function onDateChange(date, type) {\n      if (type === 'END_DATE') {\n        this.setState({\n          selectedEndDate: date\n        });\n      } else {\n        this.setState({\n          selectedStartDate: date,\n          selectedEndDate: null\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          selectedStartDate = _this$state.selectedStartDate,\n          selectedEndDate = _this$state.selectedEndDate;\n      var minDate = new Date();\n      var maxDate = new Date(2050, 6, 3);\n      var startDate = selectedStartDate ? selectedStartDate.toString() : '';\n      var endDate = selectedEndDate ? selectedEndDate.toString() : '';\n      return _jsx(View, {\n        style: {\n          flex: 1\n        },\n        children: _jsx(View, {\n          style: {\n            backgroundColor: 'black',\n            flex: 1\n          },\n          children: _jsxs(View, {\n            style: styles.container,\n            children: [_jsx(CalendarPicker, {\n              startFromMonday: true,\n              allowRangeSelection: true,\n              minDate: minDate,\n              maxDate: maxDate,\n              todayBackgroundColor: \"  rgba(100,140,180,1)\",\n              selectedDayColor: \" rgba(36,50,61,1)\",\n              selectedDayTextColor: \" rgba(127,180,225,1)\",\n              onDateChange: this.onDateChange\n            }), _jsxs(View, {\n              style: {\n                flex: 1\n              },\n              children: [_jsxs(Text, {\n                children: [\"SELECTED START DATE:\", startDate]\n              }), _jsxs(Text, {\n                children: [\"SELECTED END DATE:\", endDate]\n              })]\n            })]\n          })\n        })\n      });\n    }\n  }]);\n\n  return Calendar;\n}(Component);\n\nexport { Calendar as default };\nvar styles = StyleSheet.create({\n  container: {\n    marginTop: 20,\n    backgroundColor: 'white',\n    marginTop: 10,\n    borderRadius: 20,\n    flex: 1,\n    borderColor: \"rgba(36,50,61,1)\",\n    borderWidth: 5\n  }\n});","map":{"version":3,"sources":["C:/Users/callu/Documents/DFMPC/DFMPC-Student-Placement-System/Screens/Calendar.js"],"names":["React","Component","CalendarPicker","useNavigation","buttonHeight","textPos","SPACING","AVATAR_SIZE","ICON_SIZE","Calendar","props","state","selectedStartDate","selectedEndDate","onDateChange","bind","date","type","setState","minDate","Date","maxDate","startDate","toString","endDate","flex","backgroundColor","styles","container","StyleSheet","create","marginTop","borderRadius","borderColor","borderWidth"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;;AAQA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,SAAQC,aAAR,QAA4B,wBAA5B;;;AAEA,IAAMC,YAAY,GAAC,EAAnB;AACA,IAAMC,OAAO,GAACD,YAAY,GAAC,CAA3B;AACA,IAAME,OAAO,GAAG,EAAhB;AACA,IAAMC,WAAW,GAAG,EAApB;AACA,IAAMC,SAAS,GAAG,EAAlB;;IAEqBC,Q;;;;;AAEnB,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAEjB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,iBAAiB,EAAE,IADR;AAEXC,MAAAA,eAAe,EAAE;AAFN,KAAb;AAIA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,+BAApB;AAPiB;AAQlB;;;;WAED,sBAAaC,IAAb,EAAmBC,IAAnB,EAAyB;AACvB,UAAIA,IAAI,KAAK,UAAb,EAAyB;AACvB,aAAKC,QAAL,CAAc;AACZL,UAAAA,eAAe,EAAEG;AADL,SAAd;AAGD,OAJD,MAIO;AACL,aAAKE,QAAL,CAAc;AACZN,UAAAA,iBAAiB,EAAEI,IADP;AAEZH,UAAAA,eAAe,EAAE;AAFL,SAAd;AAID;AACF;;;WAED,kBAAS;AAEP,wBAA+C,KAAKF,KAApD;AAAA,UAAQC,iBAAR,eAAQA,iBAAR;AAAA,UAA2BC,eAA3B,eAA2BA,eAA3B;AACA,UAAMM,OAAO,GAAG,IAAIC,IAAJ,EAAhB;AACA,UAAMC,OAAO,GAAG,IAAID,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,CAAhB;AACA,UAAME,SAAS,GAAKV,iBAAiB,GAAGA,iBAAiB,CAACW,QAAlB,EAAH,GAAkC,EAAvE;AACA,UAAMC,OAAO,GAAGX,eAAe,GAAGA,eAAe,CAACU,QAAhB,EAAH,GAAgC,EAA/D;AAEA,aACE,KAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACE,UAAAA,IAAI,EAAC;AAAN,SAAb;AAAA,kBACA,KAAC,IAAD;AAAM,UAAA,KAAK,EAAE;AAAEC,YAAAA,eAAe,EAAC,OAAlB;AAA0BD,YAAAA,IAAI,EAAC;AAA/B,WAAb;AAAA,oBACA,MAAC,IAAD;AAAM,YAAA,KAAK,EAAEE,MAAM,CAACC,SAApB;AAAA,uBACE,KAAC,cAAD;AACE,cAAA,eAAe,EAAE,IADnB;AAEE,cAAA,mBAAmB,EAAE,IAFvB;AAGE,cAAA,OAAO,EAAET,OAHX;AAIE,cAAA,OAAO,EAAEE,OAJX;AAKE,cAAA,oBAAoB,EAAC,uBALvB;AAME,cAAA,gBAAgB,EAAC,mBANnB;AAOE,cAAA,oBAAoB,EAAC,sBAPvB;AAQE,cAAA,YAAY,EAAE,KAAKP;AARrB,cADF,EAYE,MAAC,IAAD;AAAM,cAAA,KAAK,EAAE;AAACW,gBAAAA,IAAI,EAAC;AAAN,eAAb;AAAA,yBACE,MAAC,IAAD;AAAA,mDAA4BH,SAA5B;AAAA,gBADF,EAEE,MAAC,IAAD;AAAA,iDAA0BE,OAA1B;AAAA,gBAFF;AAAA,cAZF;AAAA;AADA;AADA,QADF;AAyBD;;;;EA1DmCvB,S;;SAAjBQ,Q;AA+DrB,IAAMkB,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,SAAS,EAAE;AACTG,IAAAA,SAAS,EAAC,EADD;AAETL,IAAAA,eAAe,EAAE,OAFR;AAGTK,IAAAA,SAAS,EAAE,EAHF;AAITC,IAAAA,YAAY,EAAC,EAJJ;AAKTP,IAAAA,IAAI,EAAC,CALI;AAMTQ,IAAAA,WAAW,EAAC,kBANH;AAOTC,IAAAA,WAAW,EAAC;AAPH;AADoB,CAAlB,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  TouchableHighlight,\r\n  Image\r\n} from 'react-native';\r\nimport CalendarPicker from 'react-native-calendar-picker';\r\nimport {useNavigation} from '@react-navigation/core'\r\n\r\nconst buttonHeight=50;\r\nconst textPos=buttonHeight/2;\r\nconst SPACING = 20;\r\nconst AVATAR_SIZE = 70;\r\nconst ICON_SIZE = 80;\r\n\r\nexport default class Calendar extends Component {\r\n  \r\n  constructor(props) {\r\n    \r\n    super(props);\r\n    this.state = {\r\n      selectedStartDate: null,\r\n      selectedEndDate: null,\r\n    };\r\n    this.onDateChange = this.onDateChange.bind(this);\r\n  }\r\n\r\n  onDateChange(date, type) {\r\n    if (type === 'END_DATE') {\r\n      this.setState({\r\n        selectedEndDate: date,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        selectedStartDate: date,\r\n        selectedEndDate: null,\r\n      });\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    \r\n    const { selectedStartDate, selectedEndDate } = this.state;\r\n    const minDate = new Date(); // Today\r\n    const maxDate = new Date(2050, 6, 3);\r\n    const startDate  =  selectedStartDate ? selectedStartDate.toString() : '';\r\n    const endDate = selectedEndDate ? selectedEndDate.toString() : '';\r\n    \r\n    return (\r\n      <View style={{flex:1}}>\r\n      <View style={{ backgroundColor:'black',flex:1}}>\r\n      <View style={styles.container}>\r\n        <CalendarPicker\r\n          startFromMonday={true}\r\n          allowRangeSelection={true}\r\n          minDate={minDate}\r\n          maxDate={maxDate}\r\n          todayBackgroundColor=\"  rgba(100,140,180,1)\"\r\n          selectedDayColor=\" rgba(36,50,61,1)\"\r\n          selectedDayTextColor=\" rgba(127,180,225,1)\"\r\n          onDateChange={this.onDateChange}\r\n        />\r\n\r\n        <View style={{flex:1}}>\r\n          <Text>SELECTED START DATE:{ startDate }</Text>\r\n          <Text>SELECTED END DATE:{ endDate }</Text>\r\n        </View>\r\n      </View>\r\n      </View>\r\n\r\n      </View>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\n    \r\n  \r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    marginTop:20,\r\n    backgroundColor: 'white',\r\n    marginTop: 10,\r\n    borderRadius:20,\r\n    flex:1,\r\n    borderColor:\"rgba(36,50,61,1)\",\r\n    borderWidth:5\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}