{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport CalendarPicker from 'react-native-calendar-picker';\nimport { useNavigation } from '@react-navigation/core';\nimport { Calendar, CalendarList, Agenda } from 'react-native-calendars';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar buttonHeight = 50;\nvar textPos = buttonHeight / 2;\nvar SPACING = 20;\nvar AVATAR_SIZE = 70;\nvar ICON_SIZE = 80;\n\nvar CalendarView = function (_Component) {\n  _inherits(CalendarView, _Component);\n\n  var _super = _createSuper(CalendarView);\n\n  function CalendarView(props) {\n    var _this;\n\n    _classCallCheck(this, CalendarView);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      selectedStartDate: null,\n      selectedEndDate: null\n    };\n    _this.onDateChange = _this.onDateChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(CalendarView, [{\n    key: \"onDateChange\",\n    value: function onDateChange(date, type) {\n      if (type === 'END_DATE') {\n        this.setState({\n          selectedEndDate: date\n        });\n      } else {\n        this.setState({\n          selectedStartDate: date,\n          selectedEndDate: null\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          selectedStartDate = _this$state.selectedStartDate,\n          selectedEndDate = _this$state.selectedEndDate;\n      var minDate = new Date();\n      var maxDate = new Date(2050, 6, 3);\n      var startDate = selectedStartDate ? selectedStartDate.toString() : '';\n      var endDate = selectedEndDate ? selectedEndDate.toString() : '';\n      return _jsx(Agenda, {\n        items: {\n          '2022-05-06': [{\n            name: 'item 1 - any js object'\n          }],\n          '2022-05-06': [{\n            name: 'item 2 - any js object',\n            height: 80\n          }],\n          '2022-05-24': [],\n          '2022-05-25': [{\n            name: 'item 3 - any js object'\n          }, {\n            name: 'any js object'\n          }]\n        },\n        loadItemsForMonth: function loadItemsForMonth(month) {\n          console.log('trigger items loading');\n        },\n        onCalendarToggled: function onCalendarToggled(calendarOpened) {\n          console.log(calendarOpened);\n        },\n        onDayPress: function onDayPress(day) {\n          console.log('day pressed');\n        },\n        onDayChange: function onDayChange(day) {\n          console.log('day changed');\n        },\n        minDate: '2012-05-10',\n        maxDate: '2050-05-30',\n        pastScrollRange: 50,\n        futureScrollRange: 50,\n        renderItem: function renderItem(item, firstItemInDay) {\n          return _jsx(View, {\n            children: _jsx(Image, {\n              style: {\n                width: ICON_SIZE,\n                height: ICON_SIZE,\n                resizeMode: 'cover',\n                marginLeft: ICON_SIZE,\n                borderRadius: ICON_SIZE,\n                marginRight: SPACING / 2,\n                marginTop: 10,\n                borderWidth: 0,\n                alignSelf: 'flex-end',\n                borderColor: \"rgba(0,0,0,1)\",\n                backgroundColor: \"rgba(255,255,255,1)\",\n                shadowOffset: {\n                  height: 10,\n                  shadowColor: 'black'\n                },\n                shadowOpacity: 1,\n                shadowRadius: 20\n              },\n              source: require(\"./bear.gif\")\n            })\n          });\n        },\n        renderDay: function renderDay(day, item) {\n          return _jsx(View, {});\n        },\n        renderEmptyDate: function renderEmptyDate() {\n          return _jsx(View, {});\n        },\n        renderKnob: function renderKnob() {\n          return _jsx(View, {});\n        },\n        renderEmptyData: function renderEmptyData() {\n          return _jsx(View, {});\n        },\n        rowHasChanged: function rowHasChanged(r1, r2) {\n          return r1.text !== r2.text;\n        },\n        hideKnob: true,\n        showClosingKnob: false,\n        markedDates: {\n          '2022-05-06': {\n            selected: true,\n            marked: true\n          },\n          '2012-05-17': {\n            marked: true\n          },\n          '2012-05-18': {\n            disabled: true\n          }\n        },\n        disabledByDefault: true,\n        onRefresh: function onRefresh() {\n          return console.log('refreshing...');\n        },\n        refreshing: false,\n        refreshControl: null,\n        theme: {\n          agendaDayTextColor: 'yellow',\n          agendaDayNumColor: 'green',\n          agendaTodayColor: 'red',\n          agendaKnobColor: 'blue'\n        },\n        scrollEnabled: true,\n        style: {}\n      });\n    }\n  }]);\n\n  return CalendarView;\n}(Component);\n\nexport { CalendarView as default };\nvar styles = StyleSheet.create({\n  container: {\n    marginTop: 20,\n    backgroundColor: 'white',\n    marginTop: 10,\n    borderRadius: 20,\n    flex: 1,\n    borderColor: \"rgba(36,50,61,1)\",\n    borderWidth: 5\n  }\n});","map":{"version":3,"sources":["C:/Users/callu/Documents/DFMPC/DFMPC-Student-Placement-System/Screens/CalendarView.js"],"names":["React","Component","CalendarPicker","useNavigation","Calendar","CalendarList","Agenda","buttonHeight","textPos","SPACING","AVATAR_SIZE","ICON_SIZE","CalendarView","props","state","selectedStartDate","selectedEndDate","onDateChange","bind","date","type","setState","minDate","Date","maxDate","startDate","toString","endDate","name","height","month","console","log","calendarOpened","day","item","firstItemInDay","width","resizeMode","marginLeft","borderRadius","marginRight","marginTop","borderWidth","alignSelf","borderColor","backgroundColor","shadowOffset","shadowColor","shadowOpacity","shadowRadius","require","r1","r2","text","selected","marked","disabled","agendaDayTextColor","agendaDayNumColor","agendaTodayColor","agendaKnobColor","styles","StyleSheet","create","container","flex"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  TouchableHighlight,\r\n  Image\r\n} from 'react-native';\r\nimport CalendarPicker from 'react-native-calendar-picker';\r\nimport {useNavigation} from '@react-navigation/core'\r\nimport {Calendar,CalendarList,Agenda} from 'react-native-calendars';\r\n\r\nconst buttonHeight=50;\r\nconst textPos=buttonHeight/2;\r\nconst SPACING = 20;\r\nconst AVATAR_SIZE = 70;\r\nconst ICON_SIZE = 80;\r\n\r\nexport default class CalendarView extends Component {\r\n  \r\n  constructor(props) {\r\n    \r\n    super(props);\r\n    this.state = {\r\n      selectedStartDate: null,\r\n      selectedEndDate: null,\r\n    };\r\n    this.onDateChange = this.onDateChange.bind(this);\r\n  }\r\n\r\n  onDateChange(date, type) {\r\n    if (type === 'END_DATE') {\r\n      this.setState({\r\n        selectedEndDate: date,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        selectedStartDate: date,\r\n        selectedEndDate: null,\r\n      });\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    \r\n    const { selectedStartDate, selectedEndDate } = this.state;\r\n    const minDate = new Date(); // Today\r\n    const maxDate = new Date(2050, 6, 3);\r\n    const startDate  =  selectedStartDate ? selectedStartDate.toString() : '';\r\n    const endDate = selectedEndDate ? selectedEndDate.toString() : '';\r\n    \r\n    return (\r\n\r\n      <Agenda\r\n  items={{\r\n    '2022-05-06': [{name: 'item 1 - any js object'}],\r\n    '2022-05-06': [{name: 'item 2 - any js object', height: 80}],\r\n    '2022-05-24': [],\r\n    '2022-05-25': [{name: 'item 3 - any js object'}, {name: 'any js object'}]\r\n  }}\r\n  // Callback that gets called when items for a certain month should be loaded (month became visible)\r\n  loadItemsForMonth={month => {\r\n    console.log('trigger items loading');\r\n  }}\r\n  // Callback that fires when the calendar is opened or closed\r\n  onCalendarToggled={calendarOpened => {\r\n    console.log(calendarOpened);\r\n  }}\r\n  // Callback that gets called on day press\r\n  onDayPress={day => {\r\n    console.log('day pressed');\r\n  }}\r\n  // Callback that gets called when day changes while scrolling agenda list\r\n  onDayChange={day => {\r\n    console.log('day changed');\r\n  }}\r\n  // Initially selected day\r\n  \r\n  // Minimum date that can be selected, dates before minDate will be grayed out. Default = undefined\r\n  minDate={'2012-05-10'}\r\n  // Maximum date that can be selected, dates after maxDate will be grayed out. Default = undefined\r\n  maxDate={'2050-05-30'}\r\n  // Max amount of months allowed to scroll to the past. Default = 50\r\n  pastScrollRange={50}\r\n  // Max amount of months allowed to scroll to the future. Default = 50\r\n  futureScrollRange={50}\r\n  // Specify how each item should be rendered in agenda\r\n  renderItem={(item, firstItemInDay) => {\r\n    return <View><Image \r\n    //Style for icon in top right\r\n    style={{width:ICON_SIZE,\r\n     height:ICON_SIZE,\r\n     resizeMode: 'cover',\r\n     marginLeft:ICON_SIZE,\r\n     borderRadius:ICON_SIZE\r\n     ,marginRight:SPACING/2,\r\n     marginTop:10,\r\n     borderWidth:0,\r\n     alignSelf: 'flex-end',\r\n     borderColor:\"rgba(0,0,0,1)\",\r\n     backgroundColor:\"rgba(255,255,255,1)\",\r\n   shadowOffset:{\r\n   height:10,\r\n   shadowColor:'black'\r\n   },\r\n    shadowOpacity:1,\r\n   shadowRadius:20,\r\n     }}\r\n     source={require(\"./bear.gif\")}\r\n     /></View>;\r\n  }}\r\n  // Specify how each date should be rendered. day can be undefined if the item is not first in that day\r\n  renderDay={(day, item) => {\r\n    return <View />;\r\n  }}\r\n  // Specify how empty date content with no items should be rendered\r\n  renderEmptyDate={() => {\r\n    return <View />;\r\n  }}\r\n  // Specify how agenda knob should look like\r\n  renderKnob={() => {\r\n    return <View />;\r\n  }}\r\n  // Specify what should be rendered instead of ActivityIndicator\r\n  renderEmptyData={() => {\r\n    return <View />;\r\n  }}\r\n  // Specify your item comparison function for increased performance\r\n  rowHasChanged={(r1, r2) => {\r\n    return r1.text !== r2.text;\r\n  }}\r\n  // Hide knob button. Default = false\r\n  hideKnob={true}\r\n  // When `true` and `hideKnob` prop is `false`, the knob will always be visible and the user will be able to drag the knob up and close the calendar. Default = false\r\n  showClosingKnob={false}\r\n  // By default, agenda dates are marked if they have at least one item, but you can override this if needed\r\n  markedDates={{\r\n    '2022-05-06': {selected: true, marked: true},\r\n    '2012-05-17': {marked: true},\r\n    '2012-05-18': {disabled: true}\r\n  }}\r\n  // If disabledByDefault={true} dates flagged as not disabled will be enabled. Default = false\r\n  disabledByDefault={true}\r\n  // If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make sure to also set the refreshing prop correctly\r\n  onRefresh={() => console.log('refreshing...')}\r\n  // Set this true while waiting for new data from a refresh\r\n  refreshing={false}\r\n  // Add a custom RefreshControl component, used to provide pull-to-refresh functionality for the ScrollView\r\n  refreshControl={null}\r\n  // Agenda theme\r\n  theme={{\r\n    agendaDayTextColor: 'yellow',\r\n    agendaDayNumColor: 'green',\r\n    agendaTodayColor: 'red',\r\n    agendaKnobColor: 'blue'\r\n  }}\r\n  scrollEnabled={true}\r\n  // Agenda container style\r\n  style={{}}\r\n/>\r\n\r\n      \r\n    );\r\n  }\r\n}\r\n\r\n    \r\n  \r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    marginTop:20,\r\n    backgroundColor: 'white',\r\n    marginTop: 10,\r\n    borderRadius:20,\r\n    flex:1,\r\n    borderColor:\"rgba(36,50,61,1)\",\r\n    borderWidth:5\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}