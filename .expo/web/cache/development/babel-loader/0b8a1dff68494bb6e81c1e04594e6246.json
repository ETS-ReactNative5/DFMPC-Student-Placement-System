{
  "ast": null,
  "code": "import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { firebase } from \"../firebase\";\nimport { v4 as uuidv4 } from \"uuid\";\nexport function getList(onReceiveList) {\n  var protocols, snapshot;\n  return _regeneratorRuntime.async(function getList$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          protocols = [];\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(firebase.firestore().collection(\"emergency_protocols\").get().then(function (querySnapshot) {\n            querySnapshot.forEach(function (doc) {\n              protocols.push({\n                key: protocols.length + 1,\n                Protocol: doc.id,\n                content: doc.data().protocol_1.split(\"~\").join(\"\\n\")\n              });\n            });\n          }));\n\n        case 3:\n          snapshot = _context.sent;\n          onReceiveList(protocols);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}",
  "map": {
    "version": 3,
    "names": [
      "firebase",
      "v4",
      "uuidv4",
      "getList",
      "onReceiveList",
      "protocols",
      "firestore",
      "collection",
      "get",
      "then",
      "querySnapshot",
      "forEach",
      "doc",
      "push",
      "key",
      "length",
      "Protocol",
      "id",
      "content",
      "data",
      "protocol_1",
      "split",
      "join",
      "snapshot"
    ],
    "sources": [
      "C:/Users/Peace/Desktop/YOS3/SEMESTER 1/Software Design III/2022/Software Design Project/SPS-Project/DFMPC-Student-Placement-System/project/Screens/ListApi.js"
    ],
    "sourcesContent": [
      "import { firebase } from \"../firebase\";\r\n\r\nimport { v4 as uuidv4 } from \"uuid\"; // Generate random UUID\r\n\r\nexport async function getList(onReceiveList) { // Get list of all items in the database\r\n  var protocols = []; // Create empty array to store all items in database\r\n\r\n  var snapshot = await firebase // Get all items in database\r\n    .firestore()\r\n    .collection(\"emergency_protocols\") // Get collection of protocols\r\n    .get() // Get all items in collection\r\n    .then((querySnapshot) => { // For each item in collection\r\n      querySnapshot.forEach(function (doc) { // For each item in collection\r\n        protocols.push({ // Add item to array\r\n          key: protocols.length + 1, // Add key to item\r\n          Protocol: doc.id, // Add item to array\r\n          content: doc.data().protocol_1.split(\"~\").join(\"\\n\"), // Format item using split and join\r\n        });\r\n      });\r\n    });\r\n\r\n  onReceiveList(protocols); // Send array to function that called this function\r\n}\r\n"
    ],
    "mappings": ";AAAA,SAASA,QAAT;AAEA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AAEA,OAAO,SAAeC,OAAf,CAAuBC,aAAvB;EAAA;EAAA;IAAA;MAAA;QAAA;UACDC,SADC,GACW,EADX;UAAA;UAAA,iCAGgBL,QAAQ,CAC1BM,SADkB,GAElBC,UAFkB,CAEP,qBAFO,EAGlBC,GAHkB,GAIlBC,IAJkB,CAIb,UAACC,aAAD,EAAmB;YACvBA,aAAa,CAACC,OAAd,CAAsB,UAAUC,GAAV,EAAe;cACnCP,SAAS,CAACQ,IAAV,CAAe;gBACbC,GAAG,EAAET,SAAS,CAACU,MAAV,GAAmB,CADX;gBAEbC,QAAQ,EAAEJ,GAAG,CAACK,EAFD;gBAGbC,OAAO,EAAEN,GAAG,CAACO,IAAJ,GAAWC,UAAX,CAAsBC,KAAtB,CAA4B,GAA5B,EAAiCC,IAAjC,CAAsC,IAAtC;cAHI,CAAf;YAKD,CAND;UAOD,CAZkB,CAHhB;;QAAA;UAGDC,QAHC;UAiBLnB,aAAa,CAACC,SAAD,CAAb;;QAjBK;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA"
  },
  "metadata": {},
  "sourceType": "module"
}
